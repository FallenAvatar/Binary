using System;
using System.IO;
using System.Linq;
using System.Threading;
using System.Reflection;
using System.Diagnostics;
using System.Globalization;
using System.Windows.Forms;
using System.Security.Principal;
using Nikki.Core;
using CoreExtensions.IO;
using CoreExtensions.Native;



namespace Binary
{
	static class Program
	{
		/// <summary>
		///  The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main()
		{
			// Skip administator check if in the debug mode
			if (!Debugger.IsAttached)
			{
			
				// Check if the program is run as administator, exit if not
				using var identity = WindowsIdentity.GetCurrent();
				var principal = new WindowsPrincipal(identity);
				
				if (!principal.IsInRole(WindowsBuiltInRole.Administrator))
				{
				
					MessageBox.Show("Run Binary in Administrator mode!", "Warning",
						MessageBoxButtons.OK, MessageBoxIcon.Warning);
					return;
				
				}
			
			}

			#if DEBUG
			NativeCallerX.AllocConsole();
			#endif

			Application.SetHighDpiMode(HighDpiMode.SystemAware);
			Application.EnableVisualStyles();
			Application.SetCompatibleTextRenderingDefault(false);

			var culture = CultureInfo.CreateSpecificCulture("en-US");
			Thread.CurrentThread.CurrentCulture = culture;
			CultureInfo.DefaultThreadCurrentCulture = culture;
			CultureInfo.DefaultThreadCurrentUICulture = culture;

			var version = Assembly.GetExecutingAssembly().GetName().Version;
			Endscript.Version.Value = version;

			var path = Path.GetDirectoryName(Process.GetCurrentProcess().MainModule.FileName);
			path = Path.Combine(path, "keys.txt");
			Loader.LoadBinKeys(new string[] { path });

			Application.ThreadException += new ThreadExceptionEventHandler(ThreadExceptionHandler);
			Application.Run(new IntroUI());

			#if DEBUG
			NativeCallerX.FreeConsole();
			#endif
		}

		public static void ThreadExceptionHandler(object sender, ThreadExceptionEventArgs e)
		{
			using var logger = new Logger("MainLog.txt", "Binary : Unknown Exception", true);
			logger.WriteException(e.Exception);

			MessageBox.Show("Unexpected error has occured. Please send MainLog.txt " +
				"file to developer (MaxHwoy). Right now Binary will export all your " +
				"collections to an autogenerated folder so you won't lose your data.",
				"Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);

			var s = new StackTrace(e.Exception);
			var thisasm = Assembly.GetExecutingAssembly();
			var methodname = s.GetFrames().Select(f => f.GetMethod()).First(m => m.Module.Assembly == thisasm);

			if (methodname.DeclaringType == typeof(Editor))
			{

				var form = Application.OpenForms.Cast<Form>().First(_ => _.GetType() == typeof(Editor));

				if (form is Editor editor)
				{

					editor.EmergencySaveDatabase();

				}

			}

			MessageBox.Show("Database backup up.", "Done");
		}
	}
}
